import React__default, { createContext, useContext, useState, useEffect, useRef, useCallback, useMemo, createElement, Fragment, memo } from 'react';

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectDestructuringEmpty(obj) {
  if (obj == null) throw new TypeError("Cannot destructure " + obj);
}

var styles = {"SimpleDropdownWrapper":"_2zTZb","ClearButton":"_2yQu9","DropdownOpened":"_LSeiY","LabelWrapper":"_26m-x","DropdownLabelIcon":"_MezIq","ListContainer":"_1aVmc","scale-up":"_3w-1H","noResult":"_ay445","ListSearchWrapper":"_1UIgy","ListWrapper":"_2G9wK","ListActiveItem":"_1d9fG","DropdownFullWidth":"_2iGy5","DropdownTop":"_1npaA","DropdownBottom":"_37d_K","DropdownLeft":"_1JwW9","DropdownCenter":"_3NVA0","scale-up-center":"_IWvdo","DropdownRight":"_3aLIo","LabelWrapperToRight":"_Zl2wL","DropdownLabel":"_1x_OI","DropdownPrefixLabel":"_3fClQ"};

var DropdownContext = createContext(null);
function useCreateContext(initialState) {
  function useContextData() {
    var state = useRef(initialState);
    var get = useCallback(function () {
      return state.current;
    }, []);
    var subscribes = useRef(new Set());
    var set = useCallback(function (value) {
      state.current = _extends({}, state.current, value);
      subscribes.current.forEach(function (callback) {
        return callback();
      });
    }, []);
    var subscribe = useCallback(function (callback) {
      subscribes.current.add(callback);
      return function () {
        return subscribes.current["delete"](callback);
      };
    }, []);
    return {
      get: get,
      set: set,
      subscribe: subscribe
    };
  }
  var Provider = function Provider(_ref) {
    var children = _ref.children;
    return /*#__PURE__*/React__default.createElement(DropdownContext.Provider, {
      value: useContextData()
    }, children);
  };
  return {
    Provider: Provider
  };
}
function useDispatcher() {
  var _useDropdownContext = useDropdownContext(function (state) {
      return state;
    }),
    state = _useDropdownContext[0],
    setState = _useDropdownContext[1];
  var dispatch = function dispatch(_ref2) {
    var _setState, _setState2, _setState3, _setState4, _setState5, _setState6;
    var type = _ref2.type,
      payload = _ref2.payload;
    switch (type) {
      case "toggle":
        setState((_setState = {}, _setState["visibility"] = !state.visibility, _setState));
        break;
      case "close":
        setState((_setState2 = {}, _setState2["visibility"] = false, _setState2));
        break;
      case "select":
        setState((_setState3 = {}, _setState3["visibility"] = false, _setState3["selected"] = payload, _setState3));
        break;
      case "clearSelected":
        setState((_setState4 = {}, _setState4["selected"] = null, _setState4));
        break;
      case "clearSearch":
        setState((_setState5 = {}, _setState5["search"] = null, _setState5));
        break;
      case 'search':
        setState((_setState6 = {}, _setState6["search"] = payload.length === 0 ? null : payload, _setState6));
        break;
    }
  };
  return {
    dispatch: dispatch
  };
}
var useDropdownContext = function useDropdownContext(selector) {
  var store = useContext(DropdownContext);
  if (!store) throw new Error("Store not found");
  var data = typeof selector === "function" ? function () {
    return selector(store.get());
  } : store.get;
  var _useState = useState(data),
    state = _useState[0],
    setState = _useState[1];
  useEffect(function () {
    return store.subscribe(function () {
      return setState(data);
    });
  }, []);
  return [state, store.set];
};

function Search(_ref) {
  var _labels$search, _labels$seachInputPla;
  var labels = _ref.labels;
  var _useDispatcher = useDispatcher(),
    dispatch = _useDispatcher.dispatch;
  var _useDropdownContext = useDropdownContext(function (state) {
      return state["search"];
    }),
    search = _useDropdownContext[0];
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles.ListSearchWrapper
  }, /*#__PURE__*/React__default.createElement("span", null, (_labels$search = labels === null || labels === void 0 ? void 0 : labels.search) != null ? _labels$search : 'Search'), /*#__PURE__*/React__default.createElement("input", {
    placeholder: (_labels$seachInputPla = labels === null || labels === void 0 ? void 0 : labels.seachInputPlaceholder) != null ? _labels$seachInputPla : 'Search start typing',
    value: search != null ? search : '',
    type: "search",
    spellCheck: false,
    onChange: function onChange(e) {
      return dispatch({
        type: 'search',
        payload: e.target.value.toLocaleLowerCase()
      });
    }
  }));
}

function NotResult(_ref) {
  var notResultLabel = _ref.notResultLabel;
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles.noResult
  }, notResultLabel != null ? notResultLabel : 'There is no result here.');
}
function List(_ref2) {
  var options = _ref2.options,
    searchable = _ref2.searchable,
    onSearchTyping = _ref2.onSearchTyping,
    labels = _ref2.labels;
  var _useDispatcher = useDispatcher(),
    dispatch = _useDispatcher.dispatch;
  var _useDropdownContext = useDropdownContext(function (state) {
      return state;
    }),
    state = _useDropdownContext[0];
  var selected = state.selected,
    search = state.search;
  var listRef = useRef();
  function isEqualSelected(_ref3) {
    var _selected$value, _selected$value$toStr, _selected$label, _selected$label$toStr;
    var value = _ref3.value,
      label = _ref3.label;
    return value.toString().toLowerCase() === (selected === null || selected === void 0 ? void 0 : (_selected$value = selected.value) === null || _selected$value === void 0 ? void 0 : (_selected$value$toStr = _selected$value.toString()) === null || _selected$value$toStr === void 0 ? void 0 : _selected$value$toStr.toLowerCase()) && label.toString().toLowerCase() === (selected === null || selected === void 0 ? void 0 : (_selected$label = selected.label) === null || _selected$label === void 0 ? void 0 : (_selected$label$toStr = _selected$label.toString()) === null || _selected$label$toStr === void 0 ? void 0 : _selected$label$toStr.toLowerCase());
  }
  var handleSearchTyping = useCallback(function (search, filteredOptions) {
    typeof onSearchTyping === 'function' && onSearchTyping({
      search: search,
      filteredOptions: filteredOptions
    });
  }, []);
  var filteredOptions = useMemo(function () {
    if (!search) return options;
    var filtered = options.filter(function (_ref4) {
      var _value$toString, _label$toString;
      var value = _ref4.value,
        label = _ref4.label;
      return (value === null || value === void 0 ? void 0 : (_value$toString = value.toString()) === null || _value$toString === void 0 ? void 0 : _value$toString.toLocaleLowerCase().replace(/\s/, '').includes(search != null ? search : '')) || ((_label$toString = label.toString()) === null || _label$toString === void 0 ? void 0 : _label$toString.toLocaleLowerCase().replace(/\s/, '').includes(search != null ? search : ''));
    });
    if (search) handleSearchTyping(search, filtered);
    return filtered;
  }, [search, options.length]);
  useEffect(function () {
    if (!selected) return;
    var selectedValue = filteredOptions.findIndex(isEqualSelected);
    if (selectedValue < 0) return;
    var listHeight = listRef.current.offsetHeight;
    listRef.current.scrollTop = listRef.current.children[selectedValue].offsetTop - listHeight / 3.6;
  }, [listRef.current, filteredOptions]);
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles.ListContainer
  }, searchable && /*#__PURE__*/React__default.createElement(Search, {
    labels: labels
  }), filteredOptions.length > 0 ? /*#__PURE__*/React__default.createElement("div", {
    className: styles.ListWrapper,
    ref: listRef
  }, filteredOptions.map(function (item, i) {
    var checkIsEqual = isEqualSelected({
      value: item.value,
      label: item.label
    });
    return /*#__PURE__*/React__default.createElement("button", {
      key: i,
      className: "" + (checkIsEqual ? styles.ListActiveItem : ''),
      onClick: function onClick(e) {
        return !checkIsEqual && dispatch({
          type: 'select',
          payload: _extends({}, item, {
            index: i
          })
        });
      }
    }, item.label);
  })) : /*#__PURE__*/React__default.createElement(NotResult, {
    notResultLabel: labels === null || labels === void 0 ? void 0 : labels.notFoundSearch
  }));
}

var _path;
function _extends$1() {
  _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
function SvgClose(props) {
  return /*#__PURE__*/createElement("svg", _extends$1({
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    width: 48,
    height: 48
  }, props), _path || (_path = /*#__PURE__*/createElement("path", {
    d: "M4.99 3.99a1 1 0 00-.697 1.717L10.586 12l-6.293 6.293a1 1 0 101.414 1.414L12 13.414l6.293 6.293a1 1 0 101.414-1.414L13.414 12l6.293-6.293a1 1 0 00-.727-1.717 1 1 0 00-.687.303L12 10.586 5.707 4.293a1 1 0 00-.717-.303z"
  })));
}

var _path$1;
function _extends$2() {
  _extends$2 = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$2.apply(this, arguments);
}
function SvgArrow(props) {
  return /*#__PURE__*/createElement("svg", _extends$2({
    clipRule: "evenodd",
    fillRule: "evenodd",
    strokeLinejoin: "round",
    strokeMiterlimit: 2,
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _path$1 || (_path$1 = /*#__PURE__*/createElement("path", {
    d: "M5.214 14.522l6.259 6.255c.146.147.338.22.53.22s.384-.073.53-.22l6.249-6.244a.743.743 0 00-.004-1.057.748.748 0 00-1.057-.004l-4.968 4.968V3.748a.75.75 0 00-1.5 0V18.44l-4.979-4.978a.745.745 0 00-1.054.006.748.748 0 00-.006 1.054z",
    fillRule: "nonzero"
  })));
}

function Button(_ref) {
  var _labels$notSelected;
  var labels = _ref.labels,
    clearable = _ref.clearable;
  var _useDispatcher = useDispatcher(),
    dispatch = _useDispatcher.dispatch;
  var _useDropdownContext = useDropdownContext(function (state) {
      return state;
    }),
    state = _useDropdownContext[0];
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles.LabelWrapper + " " + (state.selected && clearable ? styles.LabelWrapperToRight : ''),
    onClick: function onClick() {
      return dispatch({
        type: 'toggle'
      });
    }
  }, /*#__PURE__*/React__default.createElement("button", {
    className: styles.DropdownLabel
  }, state.selected ? /*#__PURE__*/React__default.createElement(Fragment, null, (labels === null || labels === void 0 ? void 0 : labels.selectedPrefix) && /*#__PURE__*/React__default.createElement("span", {
    className: styles.DropdownPrefixLabel
  }, labels === null || labels === void 0 ? void 0 : labels.selectedPrefix), /*#__PURE__*/React__default.createElement("b", null, state.selected.label)) : (_labels$notSelected = labels === null || labels === void 0 ? void 0 : labels.notSelected) != null ? _labels$notSelected : 'Select any choose'), /*#__PURE__*/React__default.createElement(SvgArrow, {
    className: "" + styles.DropdownLabelIcon
  }));
}

function Wrapper(_ref) {
  var props = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
  var _useDropdownContext = useDropdownContext(function (state) {
      return state;
    }),
    state = _useDropdownContext[0];
  var visibility = state.visibility,
    selected = state.selected;
  var wrapperStatus = useRef({
    defaultValue: props !== null && props !== void 0 && props.defaultValue ? false : true,
    isInit: true
  });
  var _useDispatcher = useDispatcher(),
    dispatch = _useDispatcher.dispatch;
  var divRef = useRef(null);
  useEffect(function () {
    if (!selected) return;
    if (typeof (props === null || props === void 0 ? void 0 : props.onChange) === "function" && wrapperStatus.current.defaultValue) props.onChange(selected);
    wrapperStatus.current.defaultValue = true;
  }, [selected]);
  var memoizedDefault = useMemo(function () {
    if (!(props !== null && props !== void 0 && props.defaultValue) || !(props !== null && props !== void 0 && props.options)) return;
    var defaultValue = props.options.find(function (_ref2) {
      var _props$defaultValue, _props$defaultValue$t;
      var value = _ref2.value;
      return value.toString().toLowerCase() === (props === null || props === void 0 ? void 0 : (_props$defaultValue = props.defaultValue) === null || _props$defaultValue === void 0 ? void 0 : (_props$defaultValue$t = _props$defaultValue.toString()) === null || _props$defaultValue$t === void 0 ? void 0 : _props$defaultValue$t.toLowerCase());
    });
    if (!(defaultValue !== null && defaultValue !== void 0 && defaultValue.value)) return;
    return defaultValue;
  }, [props === null || props === void 0 ? void 0 : props.defaultValue]);
  useEffect(function () {
    if (!memoizedDefault) return;
    dispatch({
      type: 'select',
      payload: memoizedDefault
    });
  }, []);
  var handleCloseDropdown = function handleCloseDropdown() {
    typeof (props === null || props === void 0 ? void 0 : props.onDropdownClosed) === 'function' && props.onDropdownClosed();
  };
  var handleOpenDropdown = function handleOpenDropdown() {
    typeof (props === null || props === void 0 ? void 0 : props.onDropdownOpened) === 'function' && props.onDropdownOpened();
  };
  var handleInitDropdown = function handleInitDropdown() {
    typeof (props === null || props === void 0 ? void 0 : props.onDropdownInit) === 'function' && props.onDropdownInit();
  };
  useEffect(function () {
    if (!visibility) {
      if (wrapperStatus.current.isInit) return handleInitDropdown();
      return handleCloseDropdown();
    }
    handleOpenDropdown();
    wrapperStatus.current.isInit = false;
    var handleClickOutside = function handleClickOutside(event) {
      if (divRef.current && !divRef.current.contains(event.target) && visibility) dispatch({
        type: 'close'
      });
    };
    document.addEventListener('mousedown', handleClickOutside);
    return function () {
      return document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [visibility]);
  var ClearButton = function ClearButton() {
    var handleClear = function handleClear() {
      dispatch({
        type: 'clearSelected'
      });
      if (typeof (props === null || props === void 0 ? void 0 : props.onClearSelected) === "function") props.onClearSelected();
    };
    return /*#__PURE__*/React__default.createElement("div", {
      onClick: handleClear,
      className: styles.ClearButton
    }, /*#__PURE__*/React__default.createElement(SvgClose, null));
  };
  var classNameOptions = {
    y: {
      top: styles.DropdownTop,
      bottom: styles.DropdownBottom
    },
    x: {
      center: styles.DropdownCenter,
      left: styles.DropdownLeft,
      right: styles.DropdownRight
    },
    fullWidthParent: styles.DropdownFullWidth
  };
  var classNames = useMemo(function () {
    var _props$configs, _props$configs$positi, _props$configs2, _props$configs2$posit, _props$configs3;
    if (!(props !== null && props !== void 0 && props.configs)) return;
    return [classNameOptions.y[props === null || props === void 0 ? void 0 : (_props$configs = props.configs) === null || _props$configs === void 0 ? void 0 : (_props$configs$positi = _props$configs.position) === null || _props$configs$positi === void 0 ? void 0 : _props$configs$positi.y], classNameOptions.x[props === null || props === void 0 ? void 0 : (_props$configs2 = props.configs) === null || _props$configs2 === void 0 ? void 0 : (_props$configs2$posit = _props$configs2.position) === null || _props$configs2$posit === void 0 ? void 0 : _props$configs2$posit.x], props !== null && props !== void 0 && (_props$configs3 = props.configs) !== null && _props$configs3 !== void 0 && _props$configs3.fullWidthParent ? classNameOptions.fullWidthParent : null].filter(Boolean).join(" ");
  }, [props === null || props === void 0 ? void 0 : props.configs]);
  return /*#__PURE__*/React__default.createElement("div", {
    ref: divRef,
    className: styles.SimpleDropdownWrapper + " \n        " + (visibility ? styles.DropdownOpened : '') + " " + classNames
  }, /*#__PURE__*/React__default.createElement(Button, props), selected && (props === null || props === void 0 ? void 0 : props.clearable) && /*#__PURE__*/React__default.createElement(ClearButton, null), visibility && /*#__PURE__*/React__default.createElement(List, props));
}
var Wrapper$1 = memo(Wrapper);

var SimpleDropdown = function SimpleDropdown(_ref) {
  var props = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
  var INIT_STATE = {
    visibility: false,
    selected: null,
    search: null
  };
  var _useCreateContext = useCreateContext(INIT_STATE),
    Provider = _useCreateContext.Provider;
  return /*#__PURE__*/React__default.createElement(Provider, null, /*#__PURE__*/React__default.createElement(Wrapper$1, props));
};

export { SimpleDropdown };
//# sourceMappingURL=index.modern.js.map
